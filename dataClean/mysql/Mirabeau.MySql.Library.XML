<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Mirabeau.MySql.Library</name>
    </assembly>
    <members>
        <member name="T:Mirabeau.MySql.Library.DatabaseHelper">
            <summary>
            The SqlHelper class is intended to encapsulate high performance, scalable best practices for common uses of SqlClient.
            </summary>
            <remarks>
            In the AppSettings there is an option to set the value of the SqlCommandTimeout, to change the default SQL timeout.
            </remarks>
        </member>
        <member name="F:Mirabeau.MySql.Library.DatabaseHelper.MySqlHelper">
            <summary>
            The MYSQL helper you want to use to execute the statements.
            </summary>
        </member>
        <member name="P:Mirabeau.MySql.Library.DatabaseHelper.CommandTimeout">
            <summary>
            Gets or sets the command timeout property. Default value is read from config.
            </summary>
            <value>
            The command timeout.
            </value>
        </member>
        <member name="M:Mirabeau.MySql.Library.DatabaseHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the database specified in 
            the connection string
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a MySqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.DatabaseHelper.ExecuteNonQueryAsync(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand asynchronous (that returns no resultset and takes no parameters) against the database specified in 
            the connection string
            </summary>
            <remarks>
            e.g.:  
             Task&lt;int&gt; result = ExecuteNonQueryAsync(connString, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a MySqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.DatabaseHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the database specified in the connection string 
            using the provided parameters
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new MySqlParameter("@productId", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a MySqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.DatabaseHelper.ExecuteNonQueryAsync(System.String,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the database specified in the connection string 
            using the provided parameters
            </summary>
            <remarks>
            e.g.:  
             Task&lt;int&gt; result = ExecuteNonQueryAsync(connString, CommandType.StoredProcedure, "PublishOrders", new MySqlParameter("@productId", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a MySqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.DatabaseHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{MySql.Data.MySqlClient.MySqlParameter})">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the database specified in the connection string 
            using the provided parameters
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new MySqlParameter("@productId", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a MySqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.DatabaseHelper.ExecuteNonQueryAsync(System.String,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{MySql.Data.MySqlClient.MySqlParameter})">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the database specified in the connection string 
            using the provided parameters
            </summary>
            <remarks>
            e.g.:  
             Task&lt;int&gt; result = ExecuteNonQueryAsync(connString, CommandType.StoredProcedure, "PublishOrders", new MySqlParameter("@productId", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a MySqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.DatabaseHelper.ExecuteNonQuery(MySql.Data.MySqlClient.MySqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the provided MySqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connection">A valid MySqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.DatabaseHelper.ExecuteNonQueryAsync(MySql.Data.MySqlClient.MySqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the provided MySqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             Task&lt;int&gt; result = ExecuteNonQueryAsync(conn, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connection">A valid MySqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.DatabaseHelper.ExecuteNonQuery(MySql.Data.MySqlClient.MySqlConnection,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the specified MySqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders", new MySqlParameter("@productId", 24));
            </remarks>
            <param name="connection">A valid MySqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.DatabaseHelper.ExecuteNonQueryAsync(MySql.Data.MySqlClient.MySqlConnection,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the specified MySqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             Task&lt;int&gt; result = ExecuteNonQueryAsync(conn, CommandType.StoredProcedure, "PublishOrders", new MySqlParameter("@productId", 24));
            </remarks>
            <param name="connection">A valid MySqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.DatabaseHelper.ExecuteNonQuery(MySql.Data.MySqlClient.MySqlConnection,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{MySql.Data.MySqlClient.MySqlParameter})">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the specified MySqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders", new MySqlParameter("@productId", 24));
            </remarks>
            <param name="connection">A valid MySqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.DatabaseHelper.ExecuteNonQueryAsync(MySql.Data.MySqlClient.MySqlConnection,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{MySql.Data.MySqlClient.MySqlParameter})">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the specified MySqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             Task&lt;int&gt; result = ExecuteNonQueryAsync(conn, CommandType.StoredProcedure, "PublishOrders", new MySqlParameter("@productId", 24));
            </remarks>
            <param name="connection">A valid MySqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.DatabaseHelper.ExecuteNonQuery(MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the provided MySqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="transaction">A valid MySqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.DatabaseHelper.ExecuteNonQueryAsync(MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the provided MySqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             Task&lt;int&gt; result = ExecuteNonQueryAsync(trans, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="transaction">A valid MySqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.DatabaseHelper.ExecuteNonQuery(MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the specified MySqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "GetOrders", new MySqlParameter("@productId", 24));
            </remarks>
            <param name="transaction">A valid MySqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.DatabaseHelper.ExecuteNonQueryAsync(MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the specified MySqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             Task&lt;int&gt; result = ExecuteNonQueryAsync(trans, CommandType.StoredProcedure, "GetOrders", new MySqlParameter("@productId", 24));
            </remarks>
            <param name="transaction">A valid MySqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.DatabaseHelper.ExecuteNonQuery(MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{MySql.Data.MySqlClient.MySqlParameter})">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the specified MySqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "GetOrders", new MySqlParameter("@productId", 24));
            </remarks>
            <param name="transaction">A valid MySqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.DatabaseHelper.ExecuteNonQueryAsync(MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{MySql.Data.MySqlClient.MySqlParameter})">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the specified MySqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             Task&lt;int&gt; result = ExecuteNonQueryAsync(trans, CommandType.StoredProcedure, "GetOrders", new MySqlParameter("@productId", 24));
            </remarks>
            <param name="transaction">A valid MySqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.DatabaseHelper.ExecuteDataSet(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a MySqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.DatabaseHelper.ExecuteDataSet(System.String,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders", new MySqlParameter("@productId", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a MySqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.DatabaseHelper.ExecuteDataSet(System.String,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{MySql.Data.MySqlClient.MySqlParameter})">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders", new MySqlParameter("@productId", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a MySqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.DatabaseHelper.ExecuteDataSet(MySql.Data.MySqlClient.MySqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided MySqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid MySqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.DatabaseHelper.ExecuteDataSet(MySql.Data.MySqlClient.MySqlConnection,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified MySqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders", new MySqlParameter("@productId", 24));
            </remarks>
            <param name="connection">A valid MySqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.DatabaseHelper.ExecuteDataSet(MySql.Data.MySqlClient.MySqlConnection,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{MySql.Data.MySqlClient.MySqlParameter})">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified MySqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders", new MySqlParameter("@productId", 24));
            </remarks>
            <param name="connection">A valid MySqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.DatabaseHelper.ExecuteDataSet(MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided MySqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid MySqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.DatabaseHelper.ExecuteDataSet(MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified MySqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders", new MySqlParameter("@productId", 24));
            </remarks>
            <param name="transaction">A valid MySqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.DatabaseHelper.ExecuteDataSet(MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{MySql.Data.MySqlClient.MySqlParameter})">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified MySqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders", new MySqlParameter("@productId", 24));
            </remarks>
            <param name="transaction">A valid MySqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.DatabaseHelper.ExecuteReader(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             MySqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a MySqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A MySqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.DatabaseHelper.ExecuteReaderAsync(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             Task&lt;MySqlDataReader&gt; result = ExecuteReaderAsync(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a MySqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A MySqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.DatabaseHelper.ExecuteReader(System.String,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             MySqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders", new MySqlParameter("@productId", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a MySqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters used to execute the command</param>
            <returns>A MySqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.DatabaseHelper.ExecuteReaderAsync(System.String,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             Task&lt;MySqlDataReader&gt; result = ExecuteReaderAsync(connString, CommandType.StoredProcedure, "GetOrders", new MySqlParameter("@productId", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a MySqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters used to execute the command</param>
            <returns>A MySqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.DatabaseHelper.ExecuteReader(System.String,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{MySql.Data.MySqlClient.MySqlParameter})">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             MySqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders", new MySqlParameter("@productId", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a MySqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters used to execute the command</param>
            <returns>A MySqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.DatabaseHelper.ExecuteReaderAsync(System.String,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{MySql.Data.MySqlClient.MySqlParameter})">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             Task&lt;MySqlDataReader&gt; result = ExecuteReaderAsync(connString, CommandType.StoredProcedure, "GetOrders", new MySqlParameter("@productId", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a MySqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters used to execute the command</param>
            <returns>A MySqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.DatabaseHelper.ExecuteReader(MySql.Data.MySqlClient.MySqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided MySqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             MySqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid MySqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A MySqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.DatabaseHelper.ExecuteReaderAsync(MySql.Data.MySqlClient.MySqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided MySqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             Task&lt;MySqlDataReader&gt; result = ExecuteReaderAsync(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid MySqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A MySqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.DatabaseHelper.ExecuteReader(MySql.Data.MySqlClient.MySqlConnection,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified MySqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             MySqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders", new MySqlParameter("@productId", 24));
            </remarks>
            <param name="connection">A valid MySqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters used to execute the command</param>
            <returns>A MySqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.DatabaseHelper.ExecuteReaderAsync(MySql.Data.MySqlClient.MySqlConnection,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified MySqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             Task&lt;MySqlDataReader&gt; result = ExecuteReaderAsync(conn, CommandType.StoredProcedure, "GetOrders", new MySqlParameter("@productId", 24));
            </remarks>
            <param name="connection">A valid MySqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters used to execute the command</param>
            <returns>A MySqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.DatabaseHelper.ExecuteReader(MySql.Data.MySqlClient.MySqlConnection,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{MySql.Data.MySqlClient.MySqlParameter})">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified MySqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             MySqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders", new MySqlParameter("@productId", 24));
            </remarks>
            <param name="connection">A valid MySqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters used to execute the command</param>
            <returns>A MySqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.DatabaseHelper.ExecuteReaderAsync(MySql.Data.MySqlClient.MySqlConnection,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{MySql.Data.MySqlClient.MySqlParameter})">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified MySqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             Task&lt;MySqlDataReader&gt; result = ExecuteReaderAsync(conn, CommandType.StoredProcedure, "GetOrders", new MySqlParameter("@productId", 24));
            </remarks>
            <param name="connection">A valid MySqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters used to execute the command</param>
            <returns>A MySqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.DatabaseHelper.ExecuteReader(MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided MySqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             MySqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid MySqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A MySqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.DatabaseHelper.ExecuteReaderAsync(MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided MySqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             Task&lt;MySqlDataReader&gt; result = ExecuteReaderAsync(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid MySqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A MySqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.DatabaseHelper.ExecuteReader(MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified MySqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
              MySqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders", new MySqlParameter("@productId", 24));
            </remarks>
            <param name="transaction">A valid MySqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters used to execute the command</param>
            <returns>A MySqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.DatabaseHelper.ExecuteReaderAsync(MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified MySqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
              Task&lt;MySqlDataReader&gt; result = ExecuteReaderAsync(trans, CommandType.StoredProcedure, "GetOrders", new MySqlParameter("@productId", 24));
            </remarks>
            <param name="transaction">A valid MySqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters used to execute the command</param>
            <returns>A MySqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.DatabaseHelper.ExecuteReader(MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{MySql.Data.MySqlClient.MySqlParameter})">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified MySqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
              MySqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders", new MySqlParameter("@productId", 24));
            </remarks>
            <param name="transaction">A valid MySqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters used to execute the command</param>
            <returns>A MySqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.DatabaseHelper.ExecuteReaderAsync(MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{MySql.Data.MySqlClient.MySqlParameter})">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified MySqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
              Task&lt;MySqlDataReader&gt; result = ExecuteReaderAsync(trans, CommandType.StoredProcedure, "GetOrders", new MySqlParameter("@productId", 24));
            </remarks>
            <param name="transaction">A valid MySqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters used to execute the command</param>
            <returns>A MySqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.DatabaseHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connectionString">A valid connection string for a MySqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.DatabaseHelper.ExecuteScalar``1(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = ExecuteScalar&lt;int&gt;(connString, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connectionString">A valid connection string for a MySqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.DatabaseHelper.ExecuteScalarAsync(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             Task&lt;object&gt; orderCount = ExecuteScalarAsync(connString, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connectionString">A valid connection string for a MySqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.DatabaseHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount", new MySqlParameter("@productId", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a MySqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.DatabaseHelper.ExecuteScalar``1(System.String,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = ExecuteScalar&lt;int&gt;(connString, CommandType.StoredProcedure, "GetOrderCount", new MySqlParameter("@productId", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a MySqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.DatabaseHelper.ExecuteScalarAsync(System.String,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             Task&lt;object&gt; orderCount = ExecuteScalarAsync(connString, CommandType.StoredProcedure, "GetOrderCount", new MySqlParameter("@productId", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a MySqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.DatabaseHelper.ExecuteScalarAsync``1(System.String,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             Task&lt;{T}&gt; orderCount = ExecuteScalarAsync&lt;{T}&gt;(connString, CommandType.StoredProcedure, "GetOrderCount", new MySqlParameter("@productId", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a MySqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.DatabaseHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{MySql.Data.MySqlClient.MySqlParameter})">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount", new MySqlParameter("@productId", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a MySqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.DatabaseHelper.ExecuteScalar``1(System.String,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{MySql.Data.MySqlClient.MySqlParameter})">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = ExecuteScalar&lt;int&gt;(connString, CommandType.StoredProcedure, "GetOrderCount", new MySqlParameter("@productId", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a MySqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.DatabaseHelper.ExecuteScalarAsync(System.String,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{MySql.Data.MySqlClient.MySqlParameter})">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             Task&lt;object&gt; orderCount = ExecuteScalarAsync(connString, CommandType.StoredProcedure, "GetOrderCount", new MySqlParameter("@productId", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a MySqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.DatabaseHelper.ExecuteScalarAsync``1(System.String,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{MySql.Data.MySqlClient.MySqlParameter})">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             Task&lt;T&gt; orderCount = ExecuteScalarAsync&lt;T&gt;(connString, CommandType.StoredProcedure, "GetOrderCount", new MySqlParameter("@productId", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a MySqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.DatabaseHelper.ExecuteScalar(MySql.Data.MySqlClient.MySqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the provided MySqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connection">A valid MySqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.DatabaseHelper.ExecuteScalar``1(MySql.Data.MySqlClient.MySqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the provided MySqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = ExecuteScalar&lt;int&gt;(conn, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connection">A valid MySqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.DatabaseHelper.ExecuteScalarAsync(MySql.Data.MySqlClient.MySqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the provided MySqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             Task&lt;object&gt; orderCount = ExecuteScalarAsync(conn, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connection">A valid MySqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.DatabaseHelper.ExecuteScalarAsync``1(MySql.Data.MySqlClient.MySqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the provided MySqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             Task&lt;{T}&gt; orderCount = ExecuteScalarAsync&lt;{T}&gt;(conn, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connection">A valid MySqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.DatabaseHelper.ExecuteScalar(MySql.Data.MySqlClient.MySqlConnection,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the specified MySqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount", new MySqlParameter("@productId", 24));
            </remarks>
            <param name="connection">A valid MySqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.DatabaseHelper.ExecuteScalar``1(MySql.Data.MySqlClient.MySqlConnection,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the specified MySqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = ExecuteScalar&lt;int&gt;(conn, CommandType.StoredProcedure, "GetOrderCount", new MySqlParameter("@productId", 24));
            </remarks>
            <param name="connection">A valid MySqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.DatabaseHelper.ExecuteScalarAsync(MySql.Data.MySqlClient.MySqlConnection,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the specified MySqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             Task&lt;object&gt; orderCount = ExecuteScalarAsync(conn, CommandType.StoredProcedure, "GetOrderCount", new MySqlParameter("@productId", 24));
            </remarks>
            <param name="connection">A valid MySqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.DatabaseHelper.ExecuteScalarAsync``1(MySql.Data.MySqlClient.MySqlConnection,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the specified MySqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             Task&lt;{T}&gt; orderCount = ExecuteScalarAsync&lt;{T}&gt;(conn, CommandType.StoredProcedure, "GetOrderCount", new MySqlParameter("@productId", 24));
            </remarks>
            <param name="connection">A valid MySqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.DatabaseHelper.ExecuteScalar(MySql.Data.MySqlClient.MySqlConnection,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{MySql.Data.MySqlClient.MySqlParameter})">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the specified MySqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount", new MySqlParameter("@productId", 24));
            </remarks>
            <param name="connection">A valid MySqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.DatabaseHelper.ExecuteScalar``1(MySql.Data.MySqlClient.MySqlConnection,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{MySql.Data.MySqlClient.MySqlParameter})">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the specified MySqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar&lt;int&gt;(conn, CommandType.StoredProcedure, "GetOrderCount", new MySqlParameter("@productId", 24));
            </remarks>
            <param name="connection">A valid MySqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.DatabaseHelper.ExecuteScalarAsync(MySql.Data.MySqlClient.MySqlConnection,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{MySql.Data.MySqlClient.MySqlParameter})">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the specified MySqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             Task&lt;object&gt; orderCount = ExecuteScalarAsync(conn, CommandType.StoredProcedure, "GetOrderCount", new MySqlParameter("@productId", 24));
            </remarks>
            <param name="connection">A valid MySqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.DatabaseHelper.ExecuteScalarAsync``1(MySql.Data.MySqlClient.MySqlConnection,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{MySql.Data.MySqlClient.MySqlParameter})">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the specified MySqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             Task&lt;{T}&gt; orderCount = ExecuteScalarAsync&lt;{T}&gt;(conn, CommandType.StoredProcedure, "GetOrderCount", new MySqlParameter("@productId", 24));
            </remarks>
            <param name="connection">A valid MySqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.DatabaseHelper.ExecuteScalar(MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the provided MySqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = ExecuteScalar&lt;int&gt;(trans, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="transaction">A valid MySqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.DatabaseHelper.ExecuteScalar``1(MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the provided MySqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = ExecuteScalar&lt;int&gt;(trans, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="transaction">A valid MySqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.DatabaseHelper.ExecuteScalarAsync(MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the provided MySqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             Task&lt;object&gt; orderCount = ExecuteScalarAsync(trans, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="transaction">A valid MySqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.DatabaseHelper.ExecuteScalarAsync``1(MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the provided MySqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             Task&lt;{T}&gt; orderCount = ExecuteScalarAsync&lt;{T}&gt;(trans, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="transaction">A valid MySqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.DatabaseHelper.ExecuteScalar(MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the specified MySqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount", new MySqlParameter("@productId", 24));
            </remarks>
            <param name="transaction">A valid MySqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.DatabaseHelper.ExecuteScalar``1(MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the specified MySqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = ExecuteScalar&lt;int&gt;(trans, CommandType.StoredProcedure, "GetOrderCount", new MySqlParameter("@productId", 24));
            </remarks>
            <param name="transaction">A valid MySqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.DatabaseHelper.ExecuteScalarAsync(MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the specified MySqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             Task&lt;object&gt; orderCount = ExecuteScalarAsync(trans, CommandType.StoredProcedure, "GetOrderCount", new MySqlParameter("@productId", 24));
            </remarks>
            <param name="transaction">A valid MySqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.DatabaseHelper.ExecuteScalarAsync``1(MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the specified MySqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             Task&lt;{T}&gt; orderCount = ExecuteScalarAsync&lt;{T}&gt;(trans, CommandType.StoredProcedure, "GetOrderCount", new MySqlParameter("@productId", 24));
            </remarks>
            <param name="transaction">A valid MySqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.DatabaseHelper.ExecuteScalar(MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{MySql.Data.MySqlClient.MySqlParameter})">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the specified MySqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount", new MySqlParameter("@productId", 24));
            </remarks>
            <param name="transaction">A valid MySqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.DatabaseHelper.ExecuteScalar``1(MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{MySql.Data.MySqlClient.MySqlParameter})">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the specified MySqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = ExecuteScalar&lt;int&gt;(trans, CommandType.StoredProcedure, "GetOrderCount", new MySqlParameter("@productId", 24));
            </remarks>
            <param name="transaction">A valid MySqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.DatabaseHelper.ExecuteScalarAsync(MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{MySql.Data.MySqlClient.MySqlParameter})">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the specified MySqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             Task&lt;object&gt; orderCount = ExecuteScalarAsync(trans, CommandType.StoredProcedure, "GetOrderCount", new MySqlParameter("@productId", 24));
            </remarks>
            <param name="transaction">A valid MySqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.DatabaseHelper.ExecuteScalarAsync``1(MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{MySql.Data.MySqlClient.MySqlParameter})">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the specified MySqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             Task&lt;{T}&gt; orderCount = ExecuteScalarAsync&lt;{T}&gt;(trans, CommandType.StoredProcedure, "GetOrderCount", new MySqlParameter("@productId", 24));
            </remarks>
            <param name="transaction">A valid MySqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="T:Mirabeau.MySql.Library.MySqlHelper">
            <summary>
            Helper class for MySql commands.
            </summary>
        </member>
        <member name="M:Mirabeau.MySql.Library.MySqlHelper.CreateConnection(System.String)">
            <summary>
            Creates a new DbConnection.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <returns></returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.MySqlHelper.CreateCommand">
            <summary>
            Creates a new DbCommand.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.MySqlHelper.CreateDataAdapter(System.Data.Common.DbCommand)">
            <summary>
            Creates a new DbDataAdapter.
            </summary>
            <param name="command">the <see cref="T:System.Data.Common.DbCommand" />.</param>
            <returns></returns>
        </member>
        <member name="T:Mirabeau.MySql.Library.IMySqlHelper">
            <summary>
            Interface for the MySql helper.
            </summary>
        </member>
        <member name="T:Mirabeau.MySql.Library.MySqlParameterFactory">
            <summary>
            Factory for creating MySqlParameters.
            </summary>
        </member>
        <member name="T:Mirabeau.MySql.Library.MySqlParameterExtensions">
            <summary>
            Extension methods for <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/>.
            </summary>
        </member>
        <member name="M:Mirabeau.MySql.Library.MySqlParameterExtensions.Clone(MySql.Data.MySqlClient.MySqlParameter)">
            <summary>
            Uses the <see cref="T:System.ICloneable"/>Interface to clone a <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/>.
            </summary>
            <param name="parameter">The SQL parameter.</param>
            <returns>The <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/></returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.MySqlParameterExtensions.CreateMySqlParameter``1(System.Nullable{``0},System.String,System.Data.ParameterDirection)">
            <summary>
            Creates a MySqlParameter with either DBNull or a value.
            </summary>
            <param name="nullableObject">The nullable object.</param>
            <param name="parameterName">The name of the parameter.</param>
            <param name="direction">The direction of the parameter.</param>
            <returns>The <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/></returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.MySqlParameterExtensions.CreateMySqlParameter(System.String,System.String,System.Data.ParameterDirection)">
            <summary>
            Creates a MySqlParameter with either DBNull or a value
            </summary>
            <param name="theValue">The value.</param>
            <param name="parameterName">The name of the parameter.</param>
            <param name="direction">The direction of the parameter.</param>
            <returns>The <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/></returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.MySqlParameterExtensions.CreateMySqlParameter(System.Nullable{System.Int32},System.String,System.Data.ParameterDirection)">
            <summary>
            Creates a MySqlParameter with either DBNull or a value
            </summary>
            <param name="theValue">The value.</param>
            <param name="parameterName">The name of the parameter.</param>
            <param name="direction">The direction of the parameter.</param>
            <returns>The <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/></returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.MySqlParameterExtensions.CreateMySqlParameter(System.Int32,System.String,System.Data.ParameterDirection)">
            <summary>
            Creates a MySqlParameter
            </summary>
            <param name="theValue">The value.</param>
            <param name="parameterName">The name of the parameter.</param>
            <param name="direction">The direction of the parameter.</param>
            <returns>The <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/></returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.MySqlParameterExtensions.CreateMySqlParameter(System.Nullable{System.Decimal},System.String,System.Data.ParameterDirection)">
            <summary>
            Creates a MySqlParameter with either DBNull or a value
            </summary>
            <param name="theValue">The value.</param>
            <param name="parameterName">The name of the parameter.</param>
            <param name="direction">The direction of the parameter.</param>
            <returns>The <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/></returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.MySqlParameterExtensions.CreateMySqlParameter(System.Decimal,System.String,System.Data.ParameterDirection)">
            <summary>
            Creates a MySqlParameter
            </summary>
            <param name="theValue">The value.</param>
            <param name="parameterName">The name of the parameter.</param>
            <param name="direction">The direction of the parameter.</param>
            <returns>The <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/></returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.MySqlParameterExtensions.CreateMySqlParameter(System.Boolean,System.String,System.Data.ParameterDirection)">
            <summary>
            Creates a MySqlParameter
            </summary>
            <param name="theValue">The value.</param>
            <param name="parameterName">The name of the parameter.</param>
            <param name="direction">The direction of the parameter.</param>
            <returns>The <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/></returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.MySqlParameterExtensions.CreateMySqlParameter(System.DateTime,System.String,MySql.Data.MySqlClient.MySqlDbType,System.Data.ParameterDirection)">
            <summary>
            Creates a MySqlParameter
            </summary>
            <param name="theValue">The value.</param>
            <param name="parameterName">The name of the parameter.</param>
            <param name="dateTimeType">Type of the SQL column.</param>
            <param name="direction">The direction of the parameter.</param>
            <returns>
            The <see cref="T:MySql.Data.MySqlClient.MySqlParameter" />
            </returns>
            <exception cref="T:System.ArgumentNullException">parameterName</exception>
        </member>
        <member name="M:Mirabeau.MySql.Library.MySqlParameterExtensions.CreateMySqlParameter(System.Nullable{System.Boolean},System.String,System.Data.ParameterDirection)">
            <summary>
            Creates a MySqlParameter with either DBNull or a value
            </summary>
            <param name="theValue">The value.</param>
            <param name="parameterName">The name of the parameter.</param>
            <param name="direction">The direction of the parameter.</param>
            <returns>The <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/></returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.MySqlParameterExtensions.CreateMySqlParameter(System.Nullable{System.DateTime},System.String,MySql.Data.MySqlClient.MySqlDbType,System.Data.ParameterDirection)">
            <summary>
            Creates a MySqlParameter with either DBNull or a value
            </summary>
            <param name="theValue">The value.</param>
            <param name="parameterName">The name of the parameter</param>
            <param name="dateTimeType">Type of the SQL column.</param>
            <param name="direction">The direction of the parameter.</param>
            <returns>
            The <see cref="T:MySql.Data.MySqlClient.MySqlParameter" />
            </returns>
            <exception cref="T:System.ArgumentNullException">parameterName</exception>
        </member>
        <member name="M:Mirabeau.MySql.Library.MySqlParameterExtensions.CreateMySqlParameter(System.Nullable{System.Int64},System.String,System.Data.ParameterDirection)">
            <summary>
            Creates a MySqlParameter with either DBNull or a value
            </summary>
            <param name="theValue">The value.</param>
            <param name="parameterName">The name of the parameter.</param>
            <param name="direction">The direction of the parameter.</param>
            <returns>The <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/></returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.MySqlParameterExtensions.CreateMySqlParameter(System.Int64,System.String,System.Data.ParameterDirection)">
            <summary>
            Creates a <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/>.
            </summary>
            <param name="theValue">The value.</param>
            <param name="parameterName">The name of the parameter.</param>
            <param name="direction">The direction of the parameter.</param>
            <returns>The <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/></returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.MySqlParameterExtensions.CreateMySqlParameter(System.Byte,System.String,System.Data.ParameterDirection)">
            <summary>
            Creates a MySqlParameter for a tinyint
            </summary>
            <param name="theValue">the value.</param>
            <param name="parameterName">The name of the parameter.</param>
            <param name="direction">The direction of the parameter.</param>
            <returns>The <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/></returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.MySqlParameterExtensions.CreateSqlParameter(System.Nullable{System.TimeSpan},System.String,System.Data.ParameterDirection)">
            <summary>
            Creates a SqlParameter for a Time
            </summary>
            <param name="theValue">the value.</param>
            <param name="parameterName">The name of the parameter.</param>
            <param name="direction">The direction of the parameter.</param>
            <returns>The <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/></returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.MySqlParameterExtensions.CreateSqlParameter(System.Single,System.String,System.Data.ParameterDirection)">
            <summary>
            Creates a SqlParameter for a float
            </summary>
            <param name="theValue">the value.</param>
            <param name="parameterName">The name of the parameter.</param>
            <param name="direction">The direction of the parameter.</param>
            <returns>The <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/></returns>
        </member>
        <member name="M:Mirabeau.MySql.Library.MySqlParameterExtensions.CreateSqlParameter(System.Nullable{System.Single},System.String,System.Data.ParameterDirection)">
            <summary>
            Creates a SqlParameter for a float
            </summary>
            <param name="theValue">the value.</param>
            <param name="parameterName">The name of the parameter.</param>
            <param name="direction">The direction of the parameter.</param>
            <returns>The <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/></returns>
        </member>
    </members>
</doc>
